{"version":3,"sources":["components/TodoItem.js","components/Todos.js","components/layout/Header.js","components/AddToDo.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","background","padding","borderBottom","textDecoration","props","todo","completed","style","this","type","onChange","markComplete","bind","id","title","onClick","delTodo","btnStyle","Component","color","boder","borderRadius","cursor","float","Todos","console","log","todos","map","key","headerStyle","textAlign","linkStyle","Header","to","AddToDo","state","e","setState","target","name","value","onSubmit","preventDefault","addToDo","display","flex","placeholder","className","About","Fragment","App","filter","newToDo","uuidv4","axios","get","then","res","data","exact","path","render","component","React","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.427c3a69.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class TodoItem extends Component {\r\n  getStyle = () =>{\r\n      return{\r\n          background: '#f4f4f4',\r\n          padding: '10px',\r\n          borderBottom: '1px #ccc dotted',\r\n          textDecoration: this.props.todo.completed ? 'line-through' : 'none'\r\n      }\r\n  }\r\n    render() {\r\n        return (\r\n            <div style={this.getStyle()}>\r\n                <p> \r\n                <input type=\"checkbox\" onChange={ this.props.markComplete.bind(this, this.props.todo.id) }/> {' '}\r\n               { this.props.todo.title }\r\n               <button onClick={this.props.delTodo.bind(this, this.props.todo.id)} style={btnStyle}>x</button>\r\n               </p> \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nTodoItem.propTypes = {\r\n    todo: PropTypes.array.isRequired\r\n  }\r\n\r\nconst btnStyle = {\r\n    background: '#ff0000',\r\n    color: '#fff',\r\n    boder: 'none',\r\n    padding: '5px 8px',\r\n    borderRadius: '50%',\r\n    cursor: 'pointer',\r\n    float:'right'\r\n}\r\n\r\nexport default TodoItem\r\n","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Todos extends Component {\r\n  // markComplete = () =>{ \r\n  //   console.log('in todo')\r\n  // }\r\n  render(){\r\n    console.log(this.props.todos);\r\n     return (\r\n      this.props.todos.map( todo =>(      \r\n      <TodoItem key={todo.id} \r\n        todo={todo} \r\n        markComplete={this.props.markComplete}\r\n        delTodo={this.props.delTodo}\r\n        ></TodoItem>\r\n      ))\r\n  );\r\n  }\r\n \r\n}\r\n\r\n// PropTypes\r\n\r\nTodos.propTypes = {\r\n  todos: PropTypes.array.isRequired\r\n}\r\n\r\nexport default Todos;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Header = () =>{\r\n    return( \r\n        <header style={headerStyle}>\r\n            <h1>\r\n                Todo\r\n            </h1>\r\n            <Link style={linkStyle} to=\"/\">Home</Link> |\r\n            <Link style={linkStyle} to=\"/about\"> About</Link>\r\n        </header>\r\n    )\r\n}\r\n\r\nconst headerStyle = {\r\n    background: '#333',\r\n    color: '#fff',\r\n    textAlign: 'center',\r\n    padding: '10px'\r\n}\r\n\r\nconst linkStyle={\r\n    color: '#fff',\r\n    textDecoration: 'none'\r\n}\r\n\r\nexport default Header","import React, { Component } from 'react'\r\n\r\nexport class AddToDo extends Component {\r\n    state = {\r\n        title: ''\r\n    }\r\n\r\n    onChange = (e) => this.setState({ [e.target.name]: e.target.value})\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addToDo(this.state.title);\r\n        this.setState({ title: '' });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.onSubmit} style={{ display: 'flex' }}>\r\n                <input \r\n                    type=\"text\" \r\n                    name=\"title\"\r\n                    style={{ flex: '10', padding:'5px'}}\r\n                    placeholder=\"Add Todo ...\"\r\n                    value={this.state.title}\r\n                    onChange={this.onChange}\r\n                    ></input>\r\n\r\n                <input\r\n                    type=\"submit\"\r\n                    value=\"Submit\"\r\n                    className=\"btn\"\r\n                    style={{ flex: '1' }}\r\n                />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddToDo\r\n","import React from 'react';\r\n\r\nexport const About = () =>{\r\n    return(\r\n        // Unlike div, React.Fragment is not going to take space in DOM\r\n        <React.Fragment>\r\n            <h1>\r\n                About\r\n            </h1>\r\n            <p>\r\n                It is a ToDoList App!\r\n            </p>\r\n        </React.Fragment>\r\n\r\n    )\r\n}","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Todos from './components/Todos';\nimport Header from './components/layout/Header';\nimport AddToDo from './components/AddToDo';\nimport './App.css';\nimport {v4 as uuidv4 } from 'uuid';\nimport { About } from './components/pages/About';\nimport axios from 'axios';\nclass App extends React.Component {\n  state = {\n    todos: [\n      // {\n      //   id: uuidv4(),\n      //   title: \"Task A\",\n      //   completed: false\n      // },\n      // {\n      //   id: uuidv4(),\n      //   title: \"Task B\",\n      //   completed: true\n      // },\n      // {\n      //   id: uuidv4(),\n      //   title: \"Task C\",\n      //   completed: false\n      // }\n    ]\n  }\n  componentDidMount(){\n    axios.get('https://jsonplaceholder.typicode.com/todos?_limit=10')\n    //.then(res =>console.log(res.data));\n      .then(res => this.setState({todos: res.data})); \n  }\n\n  markComplete = (id) => {\n    //console.log('in App.js with id:'+id);\n    this.setState({ todos: this.state.todos.map(todo =>{\n      if(todo.id === id){\n        todo.completed = !todo.completed;\n      }\n      return todo;\n    })})\n  }\n\n  delTodo = (id) =>{\n    //console.log(id);\n\n        this.setState({ todos: [...this.state.todos.filter(todo =>\n          todo.id !== id\n        )\n      ]\n    });\n  }\n\n  addToDo = (title) =>{\n    //console.log(title);\n    const newToDo ={\n      id: uuidv4(),\n      title,\n      completed: false\n    }\n    this.setState({ todos: [...this.state.todos, newToDo ] })\n  }\n\n  render(){\n     return (\n       <Router>\n         <div className=\"App\">\n          <div className=\"container\">\n              <Header />\n              <Route exact path=\"/\" render={props =>(\n                <React.Fragment>\n                  <AddToDo addToDo={this.addToDo} />\n                  <Todos todos={this.state.todos} markComplete={this.markComplete}\n                  delTodo={this.delTodo}\n                  ></Todos>\n                </React.Fragment>\n              )} />\n              <Route \n                path=\"/about\"\n                component={About}\n              />\n              \n          </div>\n          \n        </div>\n       </Router>\n        \n  );\n  }\n \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}